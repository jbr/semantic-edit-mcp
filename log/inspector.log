[2025-06-23T23:09:52Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2025-03-26","capabilities":{"sampling":{},"roots":{"listChanged":true}},"clientInfo":{"name":"mcp-inspector","version":"0.14.3"}}}
    
[2025-06-23T23:09:52Z TRACE semantic_edit_mcp] -> {"jsonrpc":"2.0","id":0,"result":{"capabilities":{"tools":{}},"instructions":"Semantic code editing with tree-sitter. Use stage_operation to preview changes, retarget_staged to adjust targeting, and commit_staged to apply.","protocolVersion":"2024-11-05","serverInfo":{"name":"semantic-edit-mcp","version":"0.1.2"}}}
[2025-06-23T23:09:52Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","method":"notifications/initialized"}
    
[2025-06-23T23:09:53Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":1,"method":"tools/list","params":{"_meta":{"progressToken":1}}}
    
[2025-06-23T23:10:03Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","method":"notifications/cancelled","params":{"requestId":1,"reason":"McpError: MCP error -32001: Request timed out"}}
    
[2025-06-23T23:10:52Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2025-03-26","capabilities":{"sampling":{},"roots":{"listChanged":true}},"clientInfo":{"name":"mcp-inspector","version":"0.14.3"}}}
    
[2025-06-23T23:10:52Z TRACE semantic_edit_mcp] -> {"jsonrpc":"2.0","id":0,"result":{"capabilities":{"tools":{}},"instructions":"Semantic code editing with tree-sitter. Use stage_operation to preview changes, retarget_staged to adjust targeting, and commit_staged to apply.","protocolVersion":"2024-11-05","serverInfo":{"name":"semantic-edit-mcp","version":"0.1.2"}}}
[2025-06-23T23:10:52Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","method":"notifications/initialized"}
    
[2025-06-23T23:10:54Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":1,"method":"tools/list","params":{"_meta":{"progressToken":1}}}
    
[2025-06-23T23:11:04Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","method":"notifications/cancelled","params":{"requestId":1,"reason":"McpError: MCP error -32001: Request timed out"}}
    
[2025-06-23T23:11:16Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":2,"method":"tools/list","params":{"_meta":{"progressToken":2}}}
    
[2025-06-23T23:11:26Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","method":"notifications/cancelled","params":{"requestId":2,"reason":"McpError: MCP error -32001: Request timed out"}}
    
[2025-06-23T23:17:36Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2025-03-26","capabilities":{"sampling":{},"roots":{"listChanged":true}},"clientInfo":{"name":"mcp-inspector","version":"0.14.3"}}}
    
[2025-06-23T23:17:36Z TRACE semantic_edit_mcp] -> {"jsonrpc":"2.0","id":0,"result":{"capabilities":{"tools":{}},"instructions":"Semantic code editing with tree-sitter. Use stage_operation to preview changes, retarget_staged to adjust targeting, and commit_staged to apply.","protocolVersion":"2024-11-05","serverInfo":{"name":"semantic-edit-mcp","version":"0.1.2"}}}
[2025-06-23T23:17:36Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","method":"notifications/initialized"}
    
[2025-06-23T23:17:37Z TRACE semantic_edit_mcp] <- {"jsonrpc":"2.0","id":1,"method":"tools/list","params":{"_meta":{"progressToken":1}}}
    
[2025-06-23T23:17:37Z TRACE semantic_edit_mcp] -> {"jsonrpc":"2.0","id":1,"result":{"tools":[{"description":"Stage an operation for execution and preview what it would do","inputSchema":{"examples":[{"content":"// Discovery first - see what options are available","description":"Step 1: Explore available node types (discovery mode)","file_path":"src/main.rs","selector":{"anchor_text":"fn hello"}},{"content":"fn hello() { println!(\"Hello, world!\"); }","description":"Step 2: Use discovered node type for precise targeting","file_path":"src/main.rs","selector":{"ancestor_node_type":"function_item","anchor_text":"fn hello","position":"replace"}},{"description":"Remove a function","file_path":"src/main.rs","selector":{"ancestor_node_type":"function_item","anchor_text":"fn unused_function","position":"replace"}},{"content":"use std::fs;","description":"Insert after a use statement","file_path":"src/main.rs","selector":{"ancestor_node_type":"use_declaration","anchor_text":"use std::collections::HashMap;","position":"after"}},{"content":"match {{content}} {\n    Ok(config) => config,\n    Err(e) => return Err(format!(\"Config error: {}\", e))\n}","description":"Add error handling around function call","file_path":"src/main.rs","selector":{"ancestor_node_type":"call_expression","anchor_text":"parse_config()","position":"around"}}],"properties":{"content":{"description":"Content to insert. For \"around\" position, use `{{content}}` as a placeholder for the original code. ðŸŽ¯ \"around\" use cases: Use around when you need atomic transformations that can't be done with multiple inserts (due to syntax requirements). Examples: error handling (Result<{{content}}>), conditionals (if cond { {{content}} }), async blocks (async { {{content}} }), or any structure requiring matching braces/brackets.\n\nOmit this content when using \"position\": \"replace\" in order to perform a delete.","type":"string"},"file_path":{"description":"Path to the source file.","type":"string"},"language":{"description":"Optional language hint. If not provided, language will be detected from file extension.","enum":["rust","json","markdown","toml","javascript","typescript","tsx","python"],"type":"string"},"selector":{"description":"Text-anchored node selector using exact text and AST navigation. ðŸŽ¯ BEST PRACTICE: Start by omitting ancestor_node_type to explore all available targeting options, then use the suggested selector from the rich exploration results.","properties":{"ancestor_node_type":{"description":"AST node type to target from the anchor point. âœ¨ DISCOVERY TIP: Omit this parameter first to see all available options with context and examples. The exploration mode shows exactly what each node type would target.","type":"string"},"anchor_text":{"description":"Exact short unique snippet to find in the source code as an anchor point. ðŸ’¡ Keep it short but unique! Examples: 'fn main', 'struct User', '\"key\":', '# Heading'. Avoid large text blocks and whitespace.","type":"string"},"position":{"description":"Location to place content ðŸ¤” CHOOSING THE RIGHT POSITION:\nâ€¢ before/after: Adding new content alongside existing code\nâ€¢ replace: Changing existing content to something completely different. To remove selected code entirely, omit content (\"replace with nothing\").\nâ€¢ around: ðŸ”„ ATOMIC TRANSFORMATION - When you need to surround existing code with new structure while preserving the original (e.g., adding error handling, conditionals, or blocks that require matching braces)","enum":["before","after","replace","around"],"type":"string"}},"required":["anchor_text"],"type":"object"}},"required":["file_path","selector"],"type":"object"},"name":"stage_operation"},{"description":"Change the targeting of an already-staged operation without rewriting the content","inputSchema":{"examples":[{"description":"After staging content to add a struct field, retarget from field_declaration to field_declaration_list for better insertion point","selector":{"ancestor_node_type":"field_declaration_list","anchor_text":"pub created_at:"}},{"description":"Move JSON insertion from inside an object to after the entire object pair","selector":{"ancestor_node_type":"pair","anchor_text":"\"cache\""}},{"description":"Adjust function insertion from declaration_list to function_item scope","selector":{"ancestor_node_type":"function_item","anchor_text":"pub fn validate_email"}},{"description":"Use exploration mode first to see all targeting options before retargeting","selector":{"anchor_text":"impl User"}}],"properties":{"selector":{"description":"Text-anchored node selector using exact text and AST navigation. ðŸ”„ RETARGETING STRATEGY: Use exploration mode (omit ancestor_node_type) to discover options, then retarget to try different scopes (e.g., field_declaration â†’ struct_item â†’ source_file for broader scope, or vice versa for narrower scope).","properties":{"ancestor_node_type":{"description":"AST node type to target from the anchor point. âœ¨ DISCOVERY TIP: Omit this parameter first to see all available options with context and examples. The exploration mode shows exactly what each node type would target.","type":"string"},"anchor_text":{"description":"Exact short unique snippet to find in the source code as an anchor point. ðŸ’¡ Keep it short but unique! Examples: 'fn main', 'struct User', '\"key\":', '# Heading'. Avoid large text blocks and whitespace.","type":"string"},"position":{"description":"Location to place content ðŸ¤” CHOOSING THE RIGHT POSITION:\nâ€¢ before/after: Adding new content alongside existing code\nâ€¢ replace: Changing existing content to something completely different. To remove selected code entirely, omit content (\"replace with nothing\").\nâ€¢ around: ðŸ”„ ATOMIC TRANSFORMATION - When you need to surround existing code with new structure while preserving the original (e.g., adding error handling, conditionals, or blocks that require matching braces)","enum":["before","after","replace","around"],"type":"string"}},"required":["anchor_text"],"type":"object"}},"required":["selector"],"type":"object"},"name":"retarget_staged"},{"description":"Execute the currently staged operation","inputSchema":{"examples":[{"acknowledge":true,"description":"Commit the currently staged operation"}],"properties":{"acknowledge":{"description":"Confirm that you want to execute the staged operation","type":"boolean"}},"type":"object"},"name":"commit_staged"},{"description":"Open files for semantic editing","inputSchema":{"examples":[{"description":"Open a single rust file","file_paths":["src/lib.rs"]},{"description":"Open multiple files","file_paths":["src/main.rs","src/lib.rs","tests/mod.rs"]},{"description":"Open multiple files with language override","file_paths":["config.local","config.prod"],"language":"json"}],"properties":{"diff_since":{"description":"Unique identifier returned when viewing a file. Provide this to see changes since a known version.","type":"string"},"file_paths":{"description":"Array of file paths to open. Can be a single file or multiple files.","items":{"type":"string"},"type":"array"},"language":{"description":"Optional language hint. If provided, all files will be parsed as this language type. If not provided, language will be detected from file extensions.","enum":["rust","json","markdown","toml","javascript","typescript","tsx","python"],"type":"string"}},"required":["file_paths"],"type":"object"},"name":"open_files"}]}}
