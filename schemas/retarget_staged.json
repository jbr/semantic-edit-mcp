{
  "name": "retarget_staged",
  "description": "Change the targeting of an already-staged operation without rewriting the content. üîÑ WHEN TO USE: You've written your content and staged an operation, but the preview shows it would insert/replace in the wrong location or cause syntax errors. Instead of starting over, use retarget to adjust the targeting while preserving your content.",
  "inputSchema": {
    "type": "object",
    "properties": {
      "selector": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "enum": [
              "before", "after", "replace", "around"
            ],
            "description": "Location to place content ü§î CHOOSING THE RIGHT POSITION:\n‚Ä¢ before/after: Adding new content alongside existing code\n‚Ä¢ replace: Changing existing content to something completely different. To remove selected code entirely, omit content (\"replace with nothing\"). \n‚Ä¢ around: üîÑ ATOMIC TRANSFORMATION - When you need to surround existing code with new structure while preserving the original (e.g., adding error handling, conditionals, or blocks that require matching braces)"
          },
          "anchor_text": {
            "type": "string",
            "description": "Exact short unique snippet to find in the source code as an anchor point. üí° Keep it short but unique! Examples: 'fn main', 'struct User', '\"key\":', '# Heading'. Can be the same or different from your original anchor_text.",
            "examples": [
              "fn main",
              "struct User",
              "pub id:",
              "\"database\":",
              "# Installation",
              "impl User"
            ]
          },
          "ancestor_node_type": {
            "type": "string",
            "description": "AST node type to target from the anchor point. ‚ú® RETARGETING STRATEGY: Use exploration mode (omit this) to discover options, then retarget to try different scopes (e.g., field_declaration ‚Üí struct_item ‚Üí source_file for broader scope, or vice versa for narrower scope).",
            "examples": [
              "function_item",
              "struct_item",
              "impl_item",
              "field_declaration",
              "pair",
              "object",
              "array",
              "expression_statement",
              "block"
            ]
          }
        },
        "required": [
          "anchor_text"
        ],
        "additionalProperties": false
      }
    },
    "required": [
      "selector"
    ],
    "additionalProperties": false,
    "examples": [
      {
        "description": "After staging content to add a struct field, retarget from field_declaration to field_declaration_list for better insertion point",
        "selector": {
          "anchor_text": "pub created_at:",
          "ancestor_node_type": "field_declaration_list"
        }
      },
      {
        "description": "Move JSON insertion from inside an object to after the entire object pair",
        "selector": {
          "anchor_text": "\"cache\"",
          "ancestor_node_type": "pair"
        }
      },
      {
        "description": "Adjust function insertion from declaration_list to function_item scope",
        "selector": {
          "anchor_text": "pub fn validate_email",
          "ancestor_node_type": "function_item"
        }
      },
      {
        "description": "Use exploration mode first to see all targeting options before retargeting",
        "selector": {
          "anchor_text": "impl User"
        }
      }
    ],
    "bestPractices": [
      "üîç DISCOVERY FIRST: Use exploration mode (omit ancestor_node_type) to see all available targeting options with previews",
      "üéØ ITERATIVE REFINEMENT: Try broader scopes (struct_item) if narrower ones (field_declaration) cause syntax errors",
      "‚ö° EFFICIENCY: Retarget instead of restarting when the content is right but the location is wrong",
      "üìç SCOPE ADJUSTMENT: Move between specific targets (field) and general targets (entire struct) easily",
      "üîÑ EXPERIMENTATION: Try multiple targeting options quickly to find the perfect insertion point"
    ],
    "commonPatterns": {
      "scopeExpansion": "Start with specific targeting (field_declaration) and expand to broader scope (struct_item, source_file) if syntax errors occur",
      "scopeNarrowing": "Start with broad targeting (object) and narrow to specific elements (pair) for precise placement",
      "anchorAdjustment": "Change anchor_text to target a different location entirely while keeping the same operation and content",
      "errorRecovery": "When an operation would cause syntax errors, retarget to a different AST node type that provides valid insertion points"
    }
  }
}
